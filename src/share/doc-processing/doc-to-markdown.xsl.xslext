<?xml version="1.0" encoding="UTF-8"?> <!-- -*-sgml-*- -->
<stylesheet 
   version="2.0"
   xmlns:common="https://iead.ittl.gtri.org/wr24/document/functions/common/2011-10-05-1029"
   xmlns:doc="https://iead.ittl.gtri.org/wr24/doc/2011-09-30-2258"
   xmlns:f="http://ittl.gtri.org/wr24/2009-03-10-1439/xsl-functions"
   xmlns:local="https://github.com/webb/doc-processing/src/share/doc-processing/doc-to-xhtml.xsl.xslext"
   xmlns:xe="http://ittl.gtri.gatech.edu/wr24/2009-03-23-1736/xsl-extension"
   xmlns:xs="http://www.w3.org/2001/XMLSchema"
   xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
   xmlns="http://www.w3.org/1999/XSL/Transform">

  <include href="common.xsl"/>

  <output method="text" indent="no" encoding="UTF-8"/>

  <!-- 

       This targets Pandoc Markdown

       Use -\-from=+fenced_divs to support hrefs to paragraphs:

       ::: {#rfc4627}

       blah blah

       :::

    -->


  <variable name="indent-prefix" as="xs:string" select="'    '"/>
  <variable name="newline" as="xs:string"><text>&#10;</text></variable>

  <function name="local:text-to-markdown" as="xs:string">
    <param name="string" as="xs:string"/>
    <value-of select="f:replace-multiple($string,
                      ( '&lt;', '\\&lt;',
                      '&gt;', '\\&gt;',
                      '\*', '\\*',
                      '\[', '\\[',
                      '\]', '\\]',
                      '\|', '\\|' ))"/>
  </function>

  <function name="local:begin-div-prefix-style" as="xs:string">
    <param name="prefix" as="xs:string"/>
    <param name="style" as="xs:string"/>
    <value-of>
      <value-of select="concat($prefix, $newline)"/>
      <value-of select="concat($prefix, '::: {custom-style=&quot;', $style, '&quot;}', $newline)"/>
    </value-of>
  </function>

  <function name="local:end-div" as="xs:string">
    <param name="prefix" as="xs:string"/>
    <value-of select="concat(
                      $prefix, $newline,
                      $prefix, ':::', $newline)"/>
  </function>

  <function name="local:normalize-text" as="xs:string">
    <param name="string" as="xs:string"/>
    <variable name="bounded" as="xs:string" select="concat('X', $string, 'X')"/>
    <variable name="normalized" as="xs:string" select="normalize-space($bounded)"/>
    <variable name="stripped" as="xs:string" select="substring($normalized, 2, string-length($normalized)-2)"/>
    <value-of select="$stripped"/>
  </function>

    <function name="local:get-rule-applicability">
      <param name="rule" as="element()"/>
      <param name="as-reference" as="xs:boolean"/>

      <xe:assert test="node-name($rule) = ( xs:QName('doc:rule'), xs:QName('doc:bogusRule') )" context="$rule"
                 >in local:get-rule-applicability($rule), $rule must be a doc:rule or doc:bogusRule.</xe:assert>
      <variable name="conformance-targets" as="xs:string*" 
                select="tokenize(normalize-space($rule/@applicability), ' ')"/>
      <if test="exists($conformance-targets)">
        <text> (</text>
        <for-each select="$conformance-targets">
          <variable name="conformance-target-id" select="."/>
          <if test="position() != 1">
            <text>, </text>
          </if>
          <variable name="resolved" 
                    select="root($rule)//doc:*[string(@id) = string($conformance-target-id)]" 
                    as="element(doc:conformance-target)?"/>
          <xe:assert test="count($resolved) = 1" context="$rule">in local:get-rule-applicability($rule), conformance target (&quot;<value-of select="$conformance-target-id"/>&quot;) of rule must resolve to a conformance target ID.</xe:assert>
          <choose>
            <when test="$as-reference">
              <apply-templates select="$resolved" mode="get-reference"/>
            </when>
            <otherwise>  
              <apply-templates select="$resolved/node()" mode="text"/>
            </otherwise>
          </choose>
        </for-each>
        <text>)</text>
      </if>
    </function>



  <template match="text()" mode="text" priority="1">
    <param name="text-is-preformatted" as="xs:boolean" select="false()" tunnel="yes"/>
    <choose>
      <when test="$text-is-preformatted = false()">
        <variable name="string" as="xs:string" select="."/>
        <variable name="replaced" as="xs:string"
                  select="replace($string, '&lt;', '\\&lt;')"/>
        <variable name="bounded" as="xs:string" select="concat('X', $replaced, 'X')"/>
        <variable name="normalized" as="xs:string" select="normalize-space($bounded)"/>
        <variable name="stripped" as="xs:string" select="substring($normalized, 2, string-length($normalized)-2)"/>
        <value-of select="$stripped"/>
      </when>
      <otherwise>
        <xe:assert test="$text-is-preformatted = true()" context=".">text-is-preformatted must be true</xe:assert>
        <value-of select="."/>
      </otherwise>
    </choose>
  </template>

  <!-- 
Sample Markdown header for pandoc:

\-\-\-
title: NIEM Internationalization  
phone: (404)407-6181  
date: 5/12/20  
email: webb.roberts@gtri.gatech.edu  
author: NIEM Technical Architecture Committee (NTAC)  
subtitle: An NTAC perspective on options for an internationalization strategy for NIEM.
\-\-\-

 -->

  <template match="doc:document">
    <param name="prefix" as="xs:string" tunnel="yes" select="''"/>
    <param name="style" as="xs:string" tunnel="yes" select="'doc'"/>

    <text>---&#10;</text>
    <text>title: </text>
    <apply-templates select="doc:title/node()" mode="text"/>
    <text>&#10;</text>
    <text>subtitle: Version </text>
    <apply-templates select="doc:version/node()" mode="text"/>
    <text>&#10;</text>
    <text>date: </text>
    <value-of select="format-date(doc:date, '[MNn] [D], [Y]', 'en', (), ())"/>
    <text>&#10;</text>
    <text>author: </text>
    <apply-templates select="doc:author/node()" mode="text"/>    
    <text>&#10;</text>
    <text>---&#10;&#10;</text>
    <apply-templates select="doc:flowStructureAbstract | doc:flowAbstract | doc:section | doc:comment | doc:subsection | doc:p | doc:pre | doc:reference | doc:ul | doc:ol | doc:tableOfContents | doc:tableOfFigures | doc:tableOfTables | doc:table | doc:blockQuote | doc:bogusDefinition | doc:definition | doc:bogusPrinciple | doc:principle | doc:bogusRule | doc:rule | doc:figure">
      <with-param name="prefix" select="$prefix" tunnel="yes"/>
      <with-param name="style" select="$style" tunnel="yes"/>
    </apply-templates>
  </template>

  <template match="doc:subsection">
    <param name="prefix" as="xs:string" tunnel="yes"/>
    
    <if test="exists(preceding::*)">
      <value-of select="concat($prefix, $newline)"/>
    </if>

    <value-of select="$prefix"/>
    <for-each select="1 to count(ancestor-or-self::doc:section|ancestor-or-self::doc:subsection)">
      <text>#</text>
    </for-each>
    <text> </text>
    <apply-templates select="doc:title/node()" mode="text"/>
    <text>&#10;</text>
    
    <apply-templates/>
      
  </template>

  <template match="doc:sub">
    <apply-templates/>
  </template>

  <template match="doc:p">
    <param name="prefix" as="xs:string" tunnel="yes"/>

    <choose>
      <when test="empty(preceding-sibling::*) and exists(parent::doc:li)"/>
      <when test="empty(preceding-sibling::*) and exists(parent::doc:blockquote)"/>
      <otherwise>
        <value-of select="concat($prefix, $newline)"/>
      </otherwise>
    </choose>

    <value-of select="$prefix"/>
    <apply-templates mode="text"/>
    <text>&#10;</text>

  </template>

  <template match="doc:p-todo">
    <param name="prefix" as="xs:string" tunnel="yes" select="''"/>
    <value-of select="$prefix"/>
    <text>{</text>
    <apply-templates mode="text"/>
    <text>}</text>
    <text>&#10;&#10;</text>
  </template>

  <template match="doc:pre">
    <param name="prefix" as="xs:string" tunnel="yes"/>
    <choose>
      <when test="empty(preceding-sibling::*) and exists(parent::doc:li)"/>
      <when test="empty(preceding-sibling::*) and exists(parent::doc:blockquote)"/>
      <otherwise>
        <value-of select="concat($prefix, $newline)"/>
      </otherwise>
    </choose>

    <value-of select="$prefix"/>
    <text>```&#10;</text> <!-- start fenced block -->
    <apply-templates mode="text">
      <with-param name="text-is-preformatted" tunnel="yes" select="true()"/>
    </apply-templates>
    <text>&#10;```&#10;</text> <!-- end fenced block -->
  </template>
  
  <template match="doc:blockquote">
    <param name="prefix" as="xs:string" tunnel="yes" select="''"/>

    <value-of select="concat($prefix, $newline)"/>

    <apply-templates select="*">
      <with-param name="prefix" select="concat($prefix, '> ')" tunnel="yes"/>
    </apply-templates>

  </template>

  <template match="doc:table">
    <text>&#10;&#10;::: {#</text>
    <value-of select="common:get-id(.)"/>
    <text>}&#10;</text>

    <if test="exists(doc:title)">
      <text>&#10;**</text>
      <apply-templates select="." mode="get-label"/>
      <text>: </text>
      <apply-templates select="." mode="get-title"/>
      <text>**&#10;</text>
    </if>

    <apply-templates select="doc:theadr|doc:tr"/>

    <text>&#10;&#10;:::&#10;</text>
  </template>

  <template match="doc:theadr">
    <text>&#10;</text>
    <apply-templates select="*"/>
    <text>|&#10;</text>

    <for-each select="*">
      <text>|:--</text>
    </for-each>
    <text>|&#10;</text>
    
  </template>

  <template match="doc:tr">
    <param name="prefix" as="xs:string" tunnel="yes" select="''"/>
    <value-of select="$prefix"/>
    <apply-templates select="*"/>
    <text>|&#10;</text>
  </template>

  <template match="doc:th | doc:td">
    <text>|</text>
    <apply-templates mode="text"/>
  </template>

  <template match="doc:section | doc:ruleSection">
    <param name="prefix" as="xs:string" tunnel="yes" select="''"/>
    <text>&#10;</text>
    <for-each select="1 to count(ancestor-or-self::doc:section|ancestor-or-self::doc:subsection)">
      <text>#</text>
    </for-each>
    <text> </text>
    <apply-templates select="." mode="get-label"/>
    <text>. </text>
    <apply-templates select="." mode="get-title"/>
    <text> {#</text>
    <value-of select="if (exists(@id)) then @id else common:get-id(.)"/>
    <text>}&#10;</text>
    <apply-templates/>
  </template>

  <template match="doc:tableOfContents">
    <text>&lt;$toc&gt;&#10;&#10;</text>
  </template>

  <template match="doc:index">
    <param name="prefix" as="xs:string" tunnel="yes" select="''"/>
    <value-of select="$prefix"/>
    <text>The index is omitted from this edition.&#10;&#10;</text>
  </template>

  <template match="doc:indexOfDefinitions">
    <for-each select="//doc:definition|//doc:termDef">
      <sort select="lower-case(normalize-space(if (exists(@term)) then @term else .))"/>
      <variable name="term" as="xs:string"
                select="normalize-space(if (exists(@term)) then @term else .)"/>
      <text>* [</text>
      <value-of select="$term"/>
      <text>](#</text>
      <value-of select="common:get-id(.)"/>
      <text>): </text>
      <apply-templates select="ancestor::doc:section[1]" mode="get-reference"/>
      <text>&#10;</text>
    </for-each>
  </template>



  <template match="doc:indexOfRules">
    <for-each select="//doc:rule">
      <text>* </text>
      <apply-templates select="." mode="get-reference"/>
      <text>: </text>
      <apply-templates select="ancestor::doc:section[1]" mode="get-reference"/>
      <text>&#10;</text>
    </for-each>
    <text>&#10;</text>
  </template>

  <template match="doc:image">
    <param name="prefix" as="xs:string" tunnel="yes" select="''"/>
    <value-of select="$prefix"/>
    <text>Images are omitted from this edition.&#10;&#10;</text>
  </template>

  <template match="doc:tableOfTables">
    <param name="prefix" as="xs:string" tunnel="yes" select="''"/>
    <value-of select="$prefix"/>
    <text>The table of tables is omitted from this edition.&#10;&#10;</text>
  </template>

  <template match="doc:tableOfFigures">
    <param name="prefix" as="xs:string" tunnel="yes"/>
    <value-of select="$prefix"/>
    <text>The table of figures is omitted from this edition.&#10;&#10;</text>
  </template>

  <template match="doc:ul|doc:ol">
    <param name="prefix" as="xs:string" tunnel="yes"/>
    <value-of select="concat($prefix,$newline)"/>
    <apply-templates>
      <with-param name="prefix" tunnel="yes" select="concat($prefix, '   ')"/>
    </apply-templates>
  </template>

  <template match="doc:ol/doc:li">
    <param name="prefix" as="xs:string" tunnel="yes" select="''"/>
    <value-of select="concat($prefix, '1. ')"/>
    <apply-templates>
      <with-param name="prefix" tunnel="yes" select="concat($prefix, '   ')"/>
    </apply-templates>
  </template>

  <template match="doc:ul/doc:li">
    <param name="prefix" as="xs:string" tunnel="yes" select="''"/>
    <!--
    <if test="exists(preceding-sibling::*[1]/self::doc:li) and count(preceding-sibling::*/*) gt 1">
      <value-of select="concat($prefix, $newline)"/>
    </if>
-->
    <value-of select="concat($prefix, '* ')"/>
    <apply-templates>
      <with-param name="prefix" tunnel="yes" select="concat($prefix, '  ')"/>
    </apply-templates>
  </template>

  <template match="doc:listOfSections">
    <param name="prefix" as="xs:string" tunnel="yes"/>
    <value-of select="concat($prefix, $newline)"/>
    <if test="exists(parent::*/doc:section)">
      <for-each select="parent::*/doc:section">
        <value-of select="concat($prefix, '* ')"/>
        <value-of>
          <apply-templates select="." mode="get-reference"/>
        </value-of>
        <text>&#10;</text>
      </for-each>
    </if>
  </template>


  <template match="doc:bogusDefinition | doc:definition">

    <text>&#10;**\[Definition: </text>
    <value-of select="local:normalize-text(local:text-to-markdown(@term))"/>
    <text>\]**&#10;</text>

    <apply-templates/>

  </template>

  <template match="doc:principle|doc:bogusPrinciple">
    <param name="prefix" as="xs:string" tunnel="yes" select="''"/>
    <value-of select="$prefix"/>
    <text>[</text>
    <apply-templates select="." mode="get-label"/>
    <text>]</text>
    <text>&#10;&#10;</text>
    <apply-templates/>
  </template>

  <template match="doc:rule|doc:bogusRule">

    <text>&#10;&#10;</text>
    <text>**</text>
    <text>\[</text>
    <variable name="label">
      <apply-templates select="." mode="get-label"/>
    </variable>
    <value-of select="local:normalize-text(local:text-to-markdown($label))"/>
    <text>\]&#10;</text>
    <if test="exists(@applicability)">
      <text> (</text>
      <variable name="applicability">
        <value-of select="f:list-get-joined(@applicability, ', ')"/>
      </variable>
      <value-of select="local:normalize-text(local:text-to-markdown($applicability))"/>
      <text>)</text>
    </if>
    <if test="exists(@class)">
      <text> (</text>
      <value-of select="local:normalize-text(local:text-to-markdown(@class))"/>
      <text>)</text>
    </if>
    <text>**&#10;&#10;</text>
    <apply-templates/>
  </template>

  <template match="doc:figure">
    <text>&#10;&#10;::: {#</text>
    <value-of select="common:get-id(.)"/>
    <text>}&#10;&#10;</text>

    <text>&#10;**</text>
    <apply-templates select="." mode="get-label"/>
    <text>: </text>
    <apply-templates select="." mode="get-title"/>
    <text>**&#10;&#10;</text>
    <apply-templates/>

    <text>&#10;&#10;:::&#10;</text>
  </template>

  <template match="doc:reference">
    <param name="prefix" as="xs:string" tunnel="yes" select="''"/>
    <value-of select="concat($newline, $prefix, '::: {#', common:get-id(.), '}', $newline)"/>
    <text>**</text>
    <apply-templates select="." mode="get-label"/>
    <text>**</text>
    <text>: </text>
    <apply-templates select="doc:p[1]/node()" mode="text"/>
    <text>&#10;&#10;</text>
    <apply-templates select="*[position() != 1]"/>
    <text>&#10;:::&#10;</text>
  </template>

  <xe:mode mode="gen-table-of-contents">

    <template match="doc:document" mode="gen-table-of-contents">
      <apply-templates mode="gen-table-of-contents"/>
    </template>

    <template match="doc:section" mode="gen-table-of-contents">
      <text>.XP&#10;</text>
      <apply-templates select="." mode="get-label"/>
      <text>. </text>
      <apply-templates select="." mode="get-title"/>
      <text>&#10;</text>
      <variable name="descendants" as="element()*"
                select="descendant::doc:section"/>
      <if test="exists($descendants)">
        <text>.RS&#10;</text>
        <apply-templates mode="gen-table-of-contents"/>
        <text>.RE&#10;</text>
      </if>
    </template>

    <template match="node()" mode="gen-table-of-contents" priority="-1">
      <apply-templates mode="gen-table-of-contents"/>
    </template>

    <template match="text()" mode="gen-table-of-contents"/>

  </xe:mode>

  <xe:mode mode="text">

    <template match="doc:termDef" mode="text">
      <text>[**</text>
      <apply-templates mode="text"/>      
      <text>**]{#</text>
      <value-of select="common:get-id(.)"/>
      <text>}</text>
    </template>
      
    <template match="doc:termRef" mode="text">
      <variable name="term" as="xs:string" 
                select="normalize-space(string(if (exists(@term)) then @term else .))"/>
      <variable name="definition" as="element()" 
                select="exactly-one(
                          //doc:definition[normalize-space(@term) = $term]
                          | //doc:termDef[normalize-space(.) = $term])"/>
      <variable name="id" as="xs:string" 
                select="common:get-id($definition)"/>
      <text>[[&#183;</text>
      <apply-templates mode="text"/>
      <text>&#183;](#</text>
      <value-of select="$id"/>
      <text>)]{#</text>
      <value-of select="common:get-id(.)"/>
      <text>}</text>
    </template>

    <template match="doc:xmlBlurb" mode="text" priority="1">
      <param name="prefix" as="xs:string" tunnel="yes" select="''"/>
      <value-of select="string-join(
                          for $line 
                            in tokenize(unparsed-text(resolve-uri(concat('xmlBlurb/', @id, '.txt'), base-uri(.))), '&#10;')
                            return concat($prefix, $line), 
                          '&#10;')"/>
    </template>

    <template match="doc:conformance-target" mode="text">
      <apply-templates mode="text"/>
    </template>

    <template match="doc:code" mode="text">
      <text>`</text>
      <apply-templates mode="text"/>
      <text>`</text>
    </template>
  
    <template match="doc:qName | doc:local-name" mode="text">
      <text>`</text>
      <apply-templates mode="text"/>
      <text>`</text>
    </template>
  
    <template match="doc:var" mode="text">
      <text>*</text>
      <apply-templates mode="text"/>
      <text>*</text>
    </template>
  
    <template match="doc:namespace-uri-for-prefix" mode="text">
      <text>`</text>
      <value-of select="exactly-one(namespace-uri-for-prefix(string-join(text(), ''), .))"/>
      <text>`</text>
    </template>
  
    <template match="doc:em" mode="text">
      <text>*</text>
      <apply-templates mode="text"/>
      <text>*</text>
    </template>

    <template match="doc:xe" mode="text">
      <apply-templates mode="text"/>
    </template>
  
    <template match="doc:char" mode="text">
      <!-- look for "single character escapes" in http://unixhelp.ed.ac.uk/CGI/man-cgi?groff+7 -->
      <choose>
        <when test="@name='aacute'">
          <text>á</text>
        </when>
        <when test="@name='ccedil'">
          <text>ç</text>
        </when>
        <when test="@name='eacute'">
          <text>é</text>
        </when>
        <when test="@name='hellip'">
          <text>…</text>
        </when>
        <when test="@name='ndash'">
          <text>–</text>
        </when>
        <when test="@name='mdash'">
          <text>—</text>
        </when>
        <when test="@name='middot'">
          <text>·</text>
        </when>
        <when test="@name='nbsp'">
          <text> </text>
        </when>
        <when test="@name='ocirc'">
          <text>ô</text>
        </when>
        <when test="@name='ouml'">
          <text>ö</text>
        </when>
        <when test="@name='rarr'">
          <text>→</text>
        </when>
        <when test="@name='rsquo'">
          <text>’</text>
        </when>
        <when test="@name='sect'">
          <text>§</text>
        </when>
        <otherwise>
          <xe:assert test="false()" context=".">Code is unprepared for occurrence of named character (@name=&quot;<value-of select="@name"/>&quot;).</xe:assert>
        </otherwise>
      </choose>
    </template>
    
    <template match="doc:strong" mode="text">
      <text>**</text>
      <apply-templates mode="text"/>
      <text>**</text>
    </template>
    
    <template match="doc:q" mode="text">
      <variable name="depth" select="count(ancestor-or-self::doc:q) mod 2" as="xs:integer"/>
      <choose>
        <when test="$depth mod 2 = 1">
          <text>&#x201c;</text> <!-- left double quotation mark https://www.fileformat.info/info/unicode/char/201c/index.htm -->
        </when>
        <otherwise>
          <text>&#x2018;</text> <!-- left single quotation mark -->
        </otherwise>
      </choose>
      <apply-templates mode="text"/>
      <choose>
        <when test="$depth mod 2 = 1">
          <text>&#x201d;</text>
        </when>
        <otherwise>
          <text>&#x2019;</text>
        </otherwise>
      </choose>
    </template>
    
    <template match="doc:link" mode="text">
      <variable name="url">
        <apply-templates mode="text">
          <with-param name="text-is-preformatted" tunnel="yes" select="true()"/>
        </apply-templates>
      </variable>
      <text>[`</text>
      <value-of select="$url"/>
      <text>`](</text>
      <value-of select="$url"/>
      <text>)</text>
    </template>
  
    <template match="doc:a" mode="text">
      <text>[</text>
      <apply-templates mode="text"/>
      <text>](</text>
      <value-of select="@href"/>
      <text>)</text>
    </template>
  
  </xe:mode>

  <xe:mode mode="get-reference">

    <template match="doc:figure" mode="get-reference">
      <param name="source" as="element()?" select="()"/>
      <apply-templates select="." mode="get-label"/>
      <text>, </text>
      <apply-templates select="." mode="get-title"/>
      <if test="exists($source) and empty($source/ancestor::doc:rule)">
        <value-of select="common:get-below-or-above($source, .)"/>
      </if>
    </template>

    <template match="doc:reference" mode="get-reference">
      <param name="source" as="element()?" select="()"/>
      <text>[**</text>
      <apply-templates select="." mode="get-label"/>
      <text>**](#</text>
      <value-of select="common:get-id(.)"/>
      <text>)</text>
    </template>

    <template match="doc:section" mode="get-reference">
      <param name="source" as="element()?" select="()"/>
      <text>[</text>
      <if test="not(common:section-is-appendix(.))">
        <text>§</text>
      </if>
      <apply-templates select="." mode="get-label"/>
      <text>, *</text>
      <apply-templates select="." mode="get-title"/>
      <text>*</text>
      <if test="exists($source)">
        <sequence select="common:get-below-or-above($source, .)"/>
      </if>
      <text>](#</text>
      <value-of select="common:get-id(.)"/>
      <text>)</text>
    </template>

    <template match="doc:ruleSection" mode="get-reference">
      <param name="source" as="element()?" select="()"/>
      <variable name="rule" as="element(doc:rule)" select="exactly-one(doc:rule)"/>

      <text>[</text>
      <apply-templates select="$rule" mode="get-label"/>
      <text>, *</text>
      <apply-templates select="." mode="get-title"/>
      <text>*</text>
      <if test="exists($source) and empty($source/ancestor::doc:rule)">
        <value-of select="common:get-below-or-above($source, .)"/>
      </if>
      <text>](#</text>
      <value-of select="common:get-id(.)"/>
      <text>)</text>
      
    </template>

    <template match="doc:rule" mode="get-reference">
      <param name="source" as="element()?" select="()"/>
      <choose>
        <when test="exists(parent::doc:ruleSection)">
          <apply-templates select="parent::doc:ruleSection" mode="get-reference">
            <with-param name="source" select="$source"/>
          </apply-templates>
        </when>
        <otherwise>
          <text>[</text>
          <apply-templates select="." mode="get-label"/>
          <sequence select="local:get-rule-applicability(., false())"/>
          <if test="exists($source) and empty($source/ancestor::doc:rule)">
            <value-of select="common:get-below-or-above($source, .)"/>
          </if>
          <text>](#</text>
          <text>)</text>
        </otherwise>
      </choose>
    </template>

    <template match="doc:principle | doc:definition" mode="get-reference">
      <param name="source" as="element()?" select="()"/>
      
      <text>[</text>
      <apply-templates select="." mode="get-label"/>
      <text>]</text>
      <if test="exists($source) and empty($source/ancestor::doc:rule)">
        <value-of select="common:get-below-or-above($source, .)"/>
      </if>
    </template>

    <template match="doc:table" mode="get-reference">
      <param name="source" as="element()?" select="()"/>
      <apply-templates select="." mode="get-label"/>
      <text>, *</text>
      <apply-templates select="." mode="get-title"/>
      <text>*</text>
      <if test="exists($source) and empty($source/ancestor::doc:rule)">
        <value-of select="common:get-below-or-above($source, .)"/>
      </if>
    </template>

  </xe:mode>

</stylesheet>
<!-- 
  Local Variables:
  mode: sgml
  indent-tabs-mode: nil
  fill-column: 9999
  End:
-->
