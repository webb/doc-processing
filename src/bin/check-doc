#!/usr/bin/env bash

root_dir=$(dirname "$0")/..
. "$root_dir"/share/wrtools-core/opt_help.bash
. "$root_dir"/share/wrtools-core/opt_verbose.bash
. "$root_dir"/share/wrtools-core/fail.bash
. "$root_dir"/share/wrtools-core/paranoia.bash

share_dir="$root_dir"/share/doc-processing

#HELP:COMMAND_NAME: Validate a file as being a valid doc
#HELP:Options:

#HELP:  --help | -h: Print this help
#HELP:  --verbose, -v: Print additional diagnostics
#HELP:  --not-paranoid: Omit basic/foundational validations

#HELP:  --catalog=$xml-catalog.xml | -c $xml-catalog.xml: Add an XML catalog for schema validation
CATALOGS=()
opt_catalog () {
    [[ $# = 1 ]] || fail_assert "$FUNCNAME expected 1 arg, got $#"
    check-xml "$1" || fail "check-xml failed on file $1"
    CATALOGS+=( "$1" )
}

OPTIND=1
while getopts :c:hv-: option
do
    case "$option" in
        c ) opt_catalog "$OPTARG";;
        h ) opt_help;;
        v ) opt_verbose;;
        - )
            case "$OPTARG" in
                catalog=* ) opt_catalog "${OPTARG#*=}";;
                help ) opt_help;;
                verbose ) opt_verbose;;
                not-paranoid ) opt_not_paranoid;;
                catalog ) fail "Long option $OPTARG is missing its required argment";;
                help=* | not-paranoid=* )
                    fail "Long option \"${OPTARG%%=*}\" has an unexpected argument";;
                * ) fail "Unknown long option \"${OPTARG%%=*}\"";;
            esac
            ;;
        '?' ) fail "unknown option \"$OPTARG\"";;
        : ) fail "option \"$OPTARG\" missing argument";;
        * ) assert false;;
    esac
done
shift $((OPTIND - 1))

if (( $# == 0 ))
then warn "not doing anything because no files were listed"
     exit 0
fi

error_level=0
while test $# -gt 0
do
    if is_paranoid && ! vrun check-xml "$1"
    then printf "File did not pass XML check: %s\n" "$1" >&2
        error_level=1
        break
    fi
    XSDVALID_COMMAND=( xs-validate )
    for CATALOG_KEY in "${!CATALOGS[@]}"
    do XSDVALID_COMMAND+=( --catalog="${CATALOGS[$CATALOG_KEY]}" )
    done
    XSDVALID_COMMAND+=( --catalog="$share_dir"/xml-catalog.xml )
    if ! vrun "${XSDVALID_COMMAND[@]}" "$1"
    then printf "File did not pass doc XML Schema check: $1\n" >&2
        error_level=1
        break
    fi
    if ! vrun schematron-execute --xslt-file="$share_dir"/doc.sch.xsl --format=text "$1"
    then printf "File did not pass doc Schematron check: %s\n" "$1" >&2
         error_level=1
         break
    fi
    shift
done

exit "$error_level"
